import json
import boto3
import os
import uuid
import base64
import pathlib
import datatier

from configparser import ConfigParser

def lambda_handler(event, context):
    try:
        print("**STARTING**")
        print("**lambda: final user post**")
        #
        # setup AWS based on config file:
        #
        config_file = 'cookbook-config.ini'
        os.environ['AWS_SHARED_CREDENTIALS_FILE'] = config_file
        
        configur = ConfigParser()
        configur.read(config_file)
        
        #
        # configure for RDS access
        #
        rds_endpoint = configur.get('rds', 'endpoint')
        rds_portnum = int(configur.get('rds', 'port_number'))
        rds_username = configur.get('rds', 'user_name')
        rds_pwd = configur.get('rds', 'user_pwd')
        rds_dbname = configur.get('rds', 'db_name')

        if "body" not in event:
            raise Exception("event has no body")
        
        #
        # check body has required fields
        #
        print("**Checking body**")
        body = json.loads(event["body"]) # parse the json

        required_fields = {"username","gender", "age", "height", "currentweight","weightgoal","nutritiongoal", "goalweight", "period"}
        if not all(field in body for field in required_fields):
            raise Exception("Missing required fields in body")


        body["age"] = int(body["age"])
        body["height"] = float(body["height"])
        body["currentweight"] = float(body["currentweight"])
        body["goalweight"] = float(body["goalweight"])
        body["period"] = int(body["period"])

        weightgoal = body["weightgoal"]
        nutritiongoal = body["nutritiongoal"]
        gender = body["gender"]
        weightgoal_fields = {"lose", "maintain", "gain"}
        if weightgoal not in weightgoal_fields:
            raise Exception("weightgoal is not in the options: lose, maintain, gain")

        nutritiongoal_fields = {"regular", "body_builder", "weight_gain"}
        if nutritiongoal not in nutritiongoal_fields:
            raise Exception("nutritiongoal is not in the options: regular, body_builder, weight_gain")
        
        gender_fields = {"male", "female"}
        if gender not in gender_fields:
            raise Exception("gender is not in the options: male, female")
        print("-----body satisfied")


        diff_weight = body["goalweight"] - body["currentweight"]
        if (diff_weight < 0 and weightgoal != "lose") or (diff_weight > 0 and weightgoal != "gain"):
            raise Exception("Your expected weight does not match your goal")
        if weightgoal == "maintain" and abs(diff_weight) > 3:
            raise Exception("Your expected weight does not match your goal")
        if weightgoal == "lose" and nutritiongoal == "weight_gain"
            raise Exception("goal conflict")

        print("-----weight goal satisfied")

        #
        # Calculating Daily Calorie Deficit （0.14lb means 500cal）
        #
        period = body["period"]
        if weightgoal == 'lose' and 0.28 < abs(diff_weight)/period:
            raise Exception("Your expectations have a serious impact on your health")
        if weightgoal == 'gain' and 0.14 < abs(diff_weight)/period:
            raise Exception("Your expectations have a serious impact on your health")

        #
        # open connection to the database and insert data
        #
        print("**Opening connection**")
        dbConn = datatier.get_dbConn(rds_endpoint, rds_portnum, rds_username, rds_pwd, rds_dbname)

        sql = """INSERT INTO users (username, gender, age, height, currentweight, goalweight, weightgoal, nutritiongoal, period) 
                VALUES (%s, %s,%s, %s, %s, %s, %s, %s, %s); """

        datatier.perform_action(dbConn, sql, [body["username"],body["gender"],body["age"],body["height"],body["currentweight"],body["goalweight"],body["weightgoal"],body["nutritiongoal"],body["period"]])
        #
        # grab the jobid that was auto-generated by mysql:
        #
        sql = "SELECT LAST_INSERT_ID();"
        row = datatier.retrieve_one_row(dbConn, sql)
        userid = row[0]
        
        print("userid:", userid)
        print("**DONE, returning userid**")
        
        return {
        'statusCode': 200,
        'body': json.dumps(str(userid))
        }


    except Exception as err:
        print("**ERROR**")
        print(str(err))

        return {
            'statusCode': 500,
            'body': json.dumps(str(err))
        }
